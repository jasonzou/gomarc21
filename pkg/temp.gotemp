
// RecordFormatName indicates the name of the format of the record and is
// used to differentiate between Bibliography, Holdings, Authority,
// Classification, and Community record formats.
func (rec Record) RecordFormatName() string {
	f := rec.RecordFormat()
	n := marcFormatName[f]
	return n
}

//  06 - Type of record
var recordType = map[string]string{
	// Bibliography
	"a": "Language material",
	"c": "Notated music",
	"d": "Manuscript notated music",
	"e": "Cartographic material",
	"f": "Manuscript cartographic material",
	"g": "Projected medium",
	"i": "Nonmusical sound recording",
	"j": "Musical sound recording",
	"k": "Two-dimensional nonprojectable graphic",
	"m": "Computer file",
	"o": "Kit",
	"p": "Mixed materials",
	"r": "Three-dimensional artifact or naturally occurring object",
	"t": "Manuscript language material",
	// Holding
	"u": "Unknown",
	"v": "Multipart item holdings",
	"x": "Single-part item holdings",
	"y": "Serial item holdings",
	// Classification
	"w": "Classification data",
	// Authority
	"z": "Authority data",
	// Community
	"q": "Community information",
}

// RecordType returns the one character code and label indicating
// the "06 - Type of record" for the record. Use RecordFormat
// to determine the record format (bibliographic, holdings, etc.)
func (rec Record) RecordType() (code, label string) {
	return shortCodeLookup(recordType, rec.Leader.Text, 6)
}

//  09 - Character coding scheme
var characterCodingScheme = map[string]string{
	" ": "MARC-8",
	"a": "UCS/Unicode",
}

// CharacterCodingScheme returns the code and label indicating the
// "09 - Character coding scheme" of the record (MARC-8 or UCS/Unicode).
func (rec Record) CharacterCodingScheme() (code, label string) {
	return shortCodeLookup(characterCodingScheme, rec.Leader.Text, 9)
}

////////////////////////////////////////////////////////////////////////
// Lookup data for Bibliography records

var bibliographyMaterialType = map[string]string{
	"BK": "Books",
	"CF": "Computer Files",
	"MP": "Maps",
	"MU": "Music",
	"CR": "Continuing Resources",
	"VM": "Visual Materials",
	"MX": "Mixed Materials",
}

// BibliographyMaterialType returns the code and description of the type
// of material documented by Bibliography the record.
// {"Books",  "Computer Files", "Maps", "Music", "Continuing Resources",
// "Visual Materials" or "Mixed Materials"}
func (rec Record) BibliographyMaterialType() (code, label string) {
	rectype := pluckByte(rec.Leader.Text, 6)

	// the simple record type to material type mappings
	var rtmap = map[string]string{
		"c": "MU",
		"d": "MU",
		"i": "MU",
		"j": "MU",
		"e": "MP",
		"f": "MP",
		"g": "VM",
		"k": "VM",
		"o": "VM",
		"r": "VM",
		"m": "CF",
		"p": "MX",
	}

	code, ok := rtmap[rectype]
	if !ok {
		// no simple match
		biblevel := pluckByte(rec.Leader.Text, 7)
		switch biblevel {
		case "a", "c", "d", "m":
			if rectype == "a" || rectype == "t" {
				code = "BK"
			}
		case "b", "i", "s":
			if rectype == "a" {
				code = "CR"
			}
		}
	}

	label = bibliographyMaterialType[code]
	return code, label
}

////////////////////////////////////////////////////////////////////////

// GetText returns the text for the leader
func (ldr Leader) GetText() string {
	return ldr.Text
}

// RecordFormat indicates the high level nature of the record and is
// used to differentiate between Bibliography, Holdings, Authority,
// Classification, and Community record formats.
func (rec Record) RecordFormat() int {
	code := pluckByte(rec.Leader.Text, 6) //?????
	switch code {
	case "q":
		return Community
	case "z":
		return Authority
	case "w":
		return Classification
	case "u", "v", "x", "y":
		return Holdings
	case "a", "c", "d", "e", "f", "g", "i", "j", "k", "m", "o", "p", "r", "t":
		return Bibliography
	}
	return FormatUnknown
}

// directory entires
// parseDirectory extracts the directory from the raw MARC record bytes
func parseDirectory(r []byte) (dir []*directoryEntry, err error) {

	for i := leaderLen; r[i] != fieldTerminator; i += 12 {
		var de directoryEntry

		de.tag = string(r[i : i+3])
		de.fieldLength, err = toInt(r[i+3 : i+7])
		if err != nil {
			return nil, err
		}

		de.startingPos, err = toInt(r[i+7 : i+12])
		if err != nil {
			return nil, err
		}

		dir = append(dir, &de)
	}
	return dir, nil
}

/*
       public MARCRecordDirectory(char[] dirRaw)
       {
           _buff = dirRaw;
           char[] temp = new char[MARCChar.DIRECTORY_ENTRY_LEN];
           MARCDirectoryEntry tempEntry;

           init();
           _entries = (int)(dirRaw.Length / MARCChar.DIRECTORY_ENTRY_LEN);

           for (int i = 0; i < _entries; i++)
           {
               Array.Copy(dirRaw, i * MARCChar.DIRECTORY_ENTRY_LEN, temp, 0, MARCChar.DIRECTORY_ENTRY_LEN);
               tempEntry = new MARCDirectoryEntry(temp);

               addEntry(tempEntry);
           }
       }

       public ArrayList getEntries()
       {
           return _dir;
       }

       public int numOfEntries()
       {
           return _entries;
       }

       public char[] asRaw()
       {
           int len = _dir.Count * MARCChar.DIRECTORY_ENTRY_LEN + 1;
           _buff = new char[len];

           int tempLen = 0;
           foreach (MARCDirectoryEntry entry in _dir)
           {
               entry.asRaw().CopyTo(_buff, tempLen);
               tempLen += MARCChar.DIRECTORY_ENTRY_LEN;
           }
           _buff[len - 1] = MARCChar.END_OF_FIELD;
           return _buff;

       }

       public int getBaseAddress()
       {
           _baseAddress = MARCChar.LEADER_LEN + _dir.Count * MARCChar.DIRECTORY_ENTRY_LEN + 1;
           return _baseAddress;
       }

       public int getRecLen()
       {
           _baseAddress = getBaseAddress();
           _recLength = _baseAddress + fieldLength() + 1;
           return _recLength;
       }

       public int Length()
       {
           return _dir.Count * MARCChar.DIRECTORY_ENTRY_LEN + 1;
       }

       private void update()
       {
           _baseAddress = getBaseAddress();
           _recLength = _baseAddress + fieldLength() + 1;

       }
       private int fieldLength()
       {
           int len = 0;
           foreach (MARCDirectoryEntry entry in _dir)
           {
               len += entry.fieldLength;
           }
           return len;
       }

       public void addEntry(MARCDirectoryEntry entry)
       {
           _dir.Add(entry);
           update();
       }

       public void deleteEntry(MARCDirectoryEntry entry)
       {
           _dir.Remove(entry);
           update();
       }
   }

       public MARCDirectoryEntry(string tagno, int len, int dataEnd)
       {
           _tag = tagno;
           _len = len;
           _dataEnd = dataEnd;
           _buff = new char[MARCChar.DIRECTORY_ENTRY_LEN];

           String temp = String.Format("{0:3}{1:0000}{2:00000}", _tag, _len, _dataEnd);

           temp.CopyTo(0, _buff, 0, MARCChar.DIRECTORY_ENTRY_LEN);

       }

       public MARCDirectoryEntry(char[] entryRaw)
       {

           char[] buff = new char[3];

           Array.Copy(entryRaw, 0, buff, 0, 3);
           _tag = new string(buff);

           buff = new char[4];
           Array.Copy(entryRaw, 3, buff, 0, 4);
           _len = getNum(buff);

           buff = new char[5];
           Array.Copy(entryRaw, 7, buff, 0, 5);
           _dataEnd = getNum(buff);
       }

       private int getNum(char[] charArray)
       {
           int len = charArray.Length;
           int retNum = 0; ;

           for (int i = 0; i < len; i++)
           {
               int temp = (int)(charArray[i] - '0') * (int)Math.Pow(10, (len - i - 1));
               retNum += temp;
           }
           return retNum;
       }
*/
